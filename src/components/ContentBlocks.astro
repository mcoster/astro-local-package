---
import { marked } from 'marked';
import { getAltText } from '../utils/image-alt-generator';

export interface ContentBlock {
  heading?: string;
  content: string;
  image?: string;
  imageAlt?: string;
  imagePosition?: 'left' | 'right';
  background?: 'white' | 'gray' | 'primary' | 'gradient';
  variant?: 'default' | 'compact' | 'expanded';
  cta?: {
    text: string;
    href: string;
  };
}

export interface Props {
  blocks: ContentBlock[];
  alternateBackground?: boolean;
  defaultBackground?: 'white' | 'gray';
}

const { 
  blocks, 
  alternateBackground = true,
  defaultBackground = 'white'
} = Astro.props;

// Process blocks with alternating backgrounds if enabled
const processedBlocks = blocks.map((block, index) => {
  if (!block.background && alternateBackground) {
    const backgrounds = ['white', 'gray'];
    const startIndex = defaultBackground === 'gray' ? 1 : 0;
    block.background = backgrounds[(startIndex + index) % 2] as 'white' | 'gray';
  }
  return block;
});
---

<div class="content-blocks">
  {processedBlocks.map((block, index) => {
    // Convert markdown content to HTML
    const htmlContent = marked.parse(block.content || '');
    
    // Determine image position (alternate if not specified)
    const imagePosition = block.imagePosition || (index % 2 === 0 ? 'right' : 'left');
    
    return (
      <section 
        class={`content-block content-block--bg-${block.background || 'white'} content-block--${block.variant || 'default'}`}
        data-position={imagePosition}
      >
        <div class="content-block__container">
          <div class={`content-block__grid content-block__grid--${imagePosition}`}>
            <div class="content-block__content">
              {block.heading && (
                <h2 class="text-3xl md:text-4xl lg:text-5xl font-bold mb-6 text-gray-900">{block.heading}</h2>
              )}
              <div class="prose prose-lg text-gray-600 max-w-none" set:html={htmlContent} />
              {block.cta && (
                <a href={block.cta.href} class="content-block__cta">
                  {block.cta.text}
                </a>
              )}
            </div>
            {block.image && (
              <div class="content-block__image-wrapper">
                <img 
                  src={block.image} 
                  alt={getAltText(block.imageAlt, block.image, 'Content image')}
                  class="content-block__image"
                  loading="lazy"
                />
              </div>
            )}
          </div>
        </div>
      </section>
    );
  })}
</div>

<style>
  .content-blocks {
    /* Container for multiple content blocks */
  }

  .content-block {
    padding: 4rem 0;
    background: white;
  }
  
  /* Background variants */
  .content-block--bg-white {
    background: white;
  }
  
  .content-block--bg-gray {
    background: #f9fafb;
  }
  
  .content-block--bg-primary {
    background: var(--color-primary-light, #eff6ff);
  }
  
  .content-block--bg-gradient {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
  }
  
  .content-block--bg-gradient h2,
  .content-block--bg-gradient .prose,
  .content-block--bg-gradient .prose strong {
    @apply text-white;
  }
  
  /* Size variants */
  .content-block--compact {
    padding: 2rem 0;
  }
  
  .content-block--expanded {
    padding: 6rem 0;
  }

  .content-block__container {
    max-width: 80rem;
    margin: 0 auto;
    padding: 0 1rem;
  }

  .content-block__grid {
    display: grid;
    gap: 3rem;
    align-items: center;
  }

  @media (min-width: 768px) {
    .content-block__grid {
      grid-template-columns: 1fr 1fr;
      gap: 4rem;
    }

    .content-block__grid--left .content-block__image-wrapper {
      order: -1;
    }
  }

  /* Heading and text styles now using Tailwind classes */
  
  /* Prose styles for markdown content */
  .prose h3 {
    @apply text-2xl md:text-3xl font-semibold my-4 text-gray-900;
  }
  
  .prose p {
    @apply mb-4;
  }
  
  .prose ul,
  .prose ol {
    @apply my-4 pl-6;
  }
  
  .prose li {
    @apply mb-2;
  }
  
  .prose strong {
    @apply font-semibold text-gray-900;
  }
  
  .prose blockquote {
    @apply border-l-4 border-primary pl-4 my-6 italic text-gray-600;
  }
  
  .prose code {
    @apply bg-gray-100 px-1 py-0.5 rounded text-sm;
  }
  
  .prose table {
    @apply w-full my-6 border-collapse;
  }
  
  .prose th,
  .prose td {
    @apply p-3 text-left border-b border-gray-200;
  }
  
  .prose th {
    @apply font-semibold bg-gray-50;
  }

  .content-block__cta {
    display: inline-block;
    margin-top: 1.5rem;
    padding: 0.75rem 1.5rem;
    background: var(--color-primary, #3b82f6);
    color: white;
    font-weight: 500;
    text-decoration: none;
    border-radius: 0.375rem;
    transition: background 150ms ease;
  }
  
  .content-block__cta:hover {
    background: var(--color-primary-dark, #2563eb);
  }
  
  .content-block--bg-gradient .content-block__cta {
    background: white;
    color: var(--color-primary, #3b82f6);
  }
  
  .content-block--bg-gradient .content-block__cta:hover {
    background: #f3f4f6;
  }

  .content-block__image-wrapper {
    position: relative;
    overflow: hidden;
    border-radius: 0.5rem;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
  }

  .content-block__image {
    width: 100%;
    height: auto;
    display: block;
    transition: transform 300ms ease;
  }

  .content-block__image-wrapper:hover .content-block__image {
    transform: scale(1.05);
  }

  /* Mobile: Always show text first */
  @media (max-width: 767px) {
    .content-block__image-wrapper {
      order: 2;
    }
    
    .content-block__content {
      order: 1;
    }
  }
</style>