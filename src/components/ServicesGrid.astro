---
import ServiceCard from './ServiceCard.astro';
import { getCollection } from 'astro:content';

export interface Props {
  heading?: string;
  subtitle?: string;
  display?: 'all' | 'featured' | 'specific';
  specific?: string[];
  limit?: number;
  columns?: number;
  showIcons?: boolean;
  showViewAll?: boolean;
  layout?: 'auto' | 'fixed' | 'balanced';
  minCardWidth?: number;
  maxCardWidth?: number;
  justifyContent?: 'center' | 'space-between' | 'space-around' | 'flex-start';
}

const { 
  heading = 'Our Services',
  subtitle = 'Professional solutions tailored to your needs',
  display = 'featured',
  specific = [],
  limit,
  columns = 3,
  showIcons = true,
  showViewAll = false,
  layout = 'auto',
  minCardWidth = 280,
  maxCardWidth = 400,
  justifyContent = 'center'
} = Astro.props;

// Get all services from content collection
const allServices = await getCollection('services');

// Filter services based on display mode
let filteredServices = allServices;

if (display === 'featured') {
  filteredServices = allServices.filter(service => service.data.featured);
} else if (display === 'specific' && specific.length > 0) {
  filteredServices = allServices.filter(service => 
    specific.includes(service.slug)
  );
}

// Sort and limit services
const services = filteredServices
  .sort((a, b) => a.data.order - b.data.order)
  .slice(0, limit || filteredServices.length)
  .map(service => ({
    title: service.data.title,
    description: service.data.excerpt,
    icon: service.data.icon,
    image: service.data.image,
    href: `/services/${service.slug}`,
  }));

// Determine optimal columns based on service count for auto layout
const serviceCount = services.length;
let optimalColumns = columns;

if (layout === 'auto') {
  if (serviceCount <= 2) optimalColumns = 2;
  else if (serviceCount === 3) optimalColumns = 3;
  else if (serviceCount === 4) optimalColumns = 4;
  else if (serviceCount === 5) optimalColumns = 3; // 3+2 is better than 4+1
  else if (serviceCount <= 6) optimalColumns = 3;
  else if (serviceCount === 7) optimalColumns = 4; // 4+3 on large screens
  else if (serviceCount <= 9) optimalColumns = 3;
  else optimalColumns = Math.min(4, Math.ceil(Math.sqrt(serviceCount)));
}

const gridClass = layout === 'auto' 
  ? `services-grid--auto services-grid--count-${serviceCount}` 
  : `services-grid--${optimalColumns}`;
---

<section class="services-section">
  <div class="container">
    <div class="services-header">
      <h2 class="services-title">{heading}</h2>
      {subtitle && <p class="services-subtitle">{subtitle}</p>}
    </div>
    <div 
      class={`services-grid ${gridClass}`}
      style={`justify-content: ${justifyContent}; --min-card-width: ${minCardWidth}px; --max-card-width: ${maxCardWidth}px;`}
    >
      {services.map((service) => (
        <ServiceCard
          title={service.title}
          description={service.description}
          icon={service.icon}
          image={service.image}
          href={service.href}
        />
      ))}
    </div>
    {showViewAll && (
      <div class="services-footer">
        <a href="/services" class="btn-view-all">
          View All Services
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="arrow-icon">
            <path stroke-linecap="round" stroke-linejoin="round" d="M13.5 4.5L21 12m0 0l-7.5 7.5M21 12H3" />
          </svg>
        </a>
      </div>
    )}
  </div>
</section>

<style>
  .services-section {
    padding: 4rem 0;
    background-color: #f9fafb;
  }

  @media (min-width: 768px) {
    .services-section {
      padding: 6rem 0;
    }
  }

  .container {
    max-width: 80rem;
    margin: 0 auto;
    padding: 0 1rem;
  }

  @media (min-width: 640px) {
    .container {
      padding: 0 1.5rem;
    }
  }

  @media (min-width: 1024px) {
    .container {
      padding: 0 2rem;
    }
  }

  .services-header {
    text-align: center;
    margin-bottom: 3rem;
  }

  @media (min-width: 768px) {
    .services-header {
      margin-bottom: 4rem;
    }
  }

  .services-title {
    font-size: 1.875rem;
    font-weight: bold;
    color: #111827;
    margin-bottom: 1rem;
  }

  @media (min-width: 768px) {
    .services-title {
      font-size: 2.25rem;
    }
  }

  @media (min-width: 1024px) {
    .services-title {
      font-size: 3rem;
    }
  }

  .services-subtitle {
    font-size: 1.125rem;
    color: #4b5563;
    max-width: 42rem;
    margin: 0 auto;
  }

  @media (min-width: 768px) {
    .services-subtitle {
      font-size: 1.25rem;
    }
  }

  /* Flexbox base layout */
  .services-grid {
    display: flex;
    flex-wrap: wrap;
    gap: 1.5rem;
    justify-content: center; /* Default centering */
  }

  /* Auto layout - cards size themselves based on available space */
  .services-grid--auto :global(.service-card) {
    flex: 1 1 var(--min-card-width);
    max-width: var(--max-card-width);
  }

  /* Specific count optimizations for auto layout */
  /* 2 services: Don't stretch too wide */
  .services-grid--auto.services-grid--count-2 :global(.service-card) {
    flex: 0 1 350px;
    max-width: 400px;
  }

  /* 5 services: 3+2 layout is better than 4+1 */
  .services-grid--auto.services-grid--count-5 :global(.service-card) {
    flex: 0 1 calc(33.333% - 1rem);
    min-width: var(--min-card-width);
    max-width: var(--max-card-width);
  }

  /* 7 services: Responsive 4+3 or 3+2+2 */
  @media (min-width: 1200px) {
    .services-grid--auto.services-grid--count-7 :global(.service-card) {
      flex: 0 1 calc(25% - 1.125rem);
      min-width: var(--min-card-width);
    }
  }

  /* Fixed column layouts */
  .services-grid--2 :global(.service-card) {
    flex: 0 1 calc(50% - 0.75rem);
    min-width: var(--min-card-width);
  }

  .services-grid--3 :global(.service-card) {
    flex: 0 1 calc(33.333% - 1rem);
    min-width: var(--min-card-width);
  }

  .services-grid--4 :global(.service-card) {
    flex: 0 1 calc(25% - 1.125rem);
    min-width: var(--min-card-width);
  }

  /* Responsive breakpoints */
  @media (max-width: 1024px) {
    .services-grid--4 :global(.service-card) {
      flex: 0 1 calc(33.333% - 1rem);
    }
    
    .services-grid--auto.services-grid--count-7 :global(.service-card) {
      flex: 0 1 calc(33.333% - 1rem);
    }
  }

  @media (max-width: 768px) {
    .services-grid--3 :global(.service-card),
    .services-grid--4 :global(.service-card) {
      flex: 0 1 calc(50% - 0.75rem);
    }
    
    .services-grid--auto.services-grid--count-5 :global(.service-card),
    .services-grid--auto.services-grid--count-7 :global(.service-card) {
      flex: 0 1 calc(50% - 0.75rem);
    }
  }

  @media (max-width: 640px) {
    .services-grid {
      gap: 1rem;
    }
    
    .services-grid :global(.service-card) {
      flex: 0 1 100%;
      max-width: 100%;
    }
  }
  
  .services-footer {
    text-align: center;
    margin-top: 3rem;
  }
  
  .btn-view-all {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.875rem 1.75rem;
    background-color: var(--color-primary, #3b82f6);
    color: white;
    border-radius: 0.375rem;
    font-weight: 500;
    text-decoration: none;
    transition: all 200ms ease;
  }
  
  .btn-view-all:hover {
    background-color: var(--color-primary-dark, #2563eb);
    gap: 0.75rem;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }
  
  .arrow-icon {
    width: 1.25rem;
    height: 1.25rem;
  }
</style>