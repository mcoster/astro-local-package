---
/**
 * MarkdownContent Component
 * Flexible component for rendering markdown from various sources
 */

import { getEntry } from 'astro:content';
import { marked } from 'marked';

export interface Props {
  source?: 'inline' | 'collection';
  content?: string;      // For inline markdown
  collection?: string;    // Collection name
  slug?: string;         // Collection item slug
  wrapper?: boolean;     // Add wrapper div with styling
  className?: string;
  // Special flag for service content injection
  injectContent?: boolean;
}

const {
  source = 'inline',
  content = '',
  collection,
  slug,
  wrapper = true,
  className = '',
  injectContent = false,
} = Astro.props;

// Handle collection source
let Content: any = null;
if (source === 'collection' && collection && slug) {
  try {
    const entry = await getEntry(collection as any, slug);
    if (entry) {
      const { Content: CollectionContent } = await entry.render();
      Content = CollectionContent;
    }
  } catch (error) {
    console.error(`Failed to load content from collection ${collection}/${slug}:`, error);
  }
}

// Process inline markdown
let processedContent = '';
if (source === 'inline' && content) {
  try {
    processedContent = marked(content);
  } catch (error) {
    console.error('Failed to process markdown:', error);
    processedContent = content;
  }
}
---

<div class={wrapper ? `prose max-w-none ${className}` : className}>
  {source === 'inline' && (
    <Fragment set:html={processedContent} />
  )}
  {source === 'collection' && Content && (
    <Content />
  )}
  {injectContent && (
    <slot />
  )}
</div>

<style>
  .prose {
    color: #374151;
    max-width: 65ch;
    margin-left: auto;
    margin-right: auto;
  }
  
  .prose.max-w-none {
    max-width: none;
  }
  
  .prose h1 {
    font-size: 2.25rem;
    font-weight: 800;
    line-height: 1.1111111;
    margin-bottom: 0.8888889em;
    margin-top: 0;
  }
  
  .prose h2 {
    font-size: 1.5rem;
    font-weight: 700;
    line-height: 1.3333333;
    margin-bottom: 1em;
    margin-top: 2em;
  }
  
  .prose h3 {
    font-size: 1.25rem;
    font-weight: 600;
    line-height: 1.6;
    margin-bottom: 0.6em;
    margin-top: 1.6em;
  }
  
  .prose p {
    line-height: 1.75;
    margin-bottom: 1.25em;
    margin-top: 1.25em;
  }
  
  .prose ul {
    list-style-type: disc;
    margin-bottom: 1.25em;
    margin-top: 1.25em;
    padding-left: 1.625em;
  }
  
  .prose ol {
    list-style-type: decimal;
    margin-bottom: 1.25em;
    margin-top: 1.25em;
    padding-left: 1.625em;
  }
  
  .prose li {
    margin-bottom: 0.5em;
    margin-top: 0.5em;
  }
  
  .prose strong {
    font-weight: 600;
  }
  
  .prose a {
    color: var(--color-primary, #3b82f6);
    text-decoration: underline;
    font-weight: 500;
  }
  
  .prose a:hover {
    color: var(--color-primary-dark, #2563eb);
  }
</style>